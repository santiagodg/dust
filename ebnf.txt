Crate ::= Item*

Item ::= Function
      |  StaticItem

Function ::= 'fn' IDENTIFIER '(' FunctionParameters? ')' FunctionReturnType? BlockExpression

FunctionParameters ::= FunctionParam (',' FunctionParam)* ','?

FunctionParam ::= 'IDENTIFIER' ':' Type

Type ::= PrimitiveType
      | ArrayType

PrimitiveType ::= 'bool'
               | 'i32'
               | 'f64'
               | 'char'

ArrayType ::= '[' Type ';' Expression ']'

FunctionReturnType ::= '->' Type

BlockExpression ::= '{' Statements? '}'

Statements ::= Statement+

Statement ::= LetStatement
           | ExpressionStatement

LetStatement ::= 'let' IDENTIFIER ':' Type ('=' Expression)? ';'

ExpressionStatement ::= ( ExpressionWithoutBlock | ExpressionWithBlock ) ';'

ExpressionWithoutBlock ::= LiteralExpression
                        | 'IDENTIFIER'
                        | OperatorExpression
                        | GroupedExpression
                        | ArrayExpression
                        | IndexExpression
                        | CallExpression
                        | ContinueExpression
                        | BreakExpression
                        | ReturnExpression
                        | SpecialFunctionExpression

LiteralExpression ::= 'CHAR_LITERAL'
                   | 'INTEGER_LITERAL'
                   | 'FLOAT_LITERAL'
                   | 'BOOLEAN_LITERAL'

OperatorExpression ::= NegationExpression
                    | ArithmenticExpression
                    | ComparisonExpression
                    | BooleanExpression
                    | TypeCastExpression
                    | AssignmentExpression

NegationExpression ::= '-' Expression
                    | '!' Expression

ArithmenticExpression ::= Expression '+' Expression
                       | Expression '-' Expression
                       | Expression '*' Expression
                       | Expression '/' Expression
                       | Expression '%' Expression

ComparisonExpression ::= Expression '==' Expression
                      | Expression '!=' Expression
                      | Expression '>' Expression
                      | Expression '<' Expression
                      | Expression '>=' Expression
                      | Expression '<=' Expression

BooleanExpression ::= Expression '||' Expression
                   | Expression '&&' Expression

TypeCastExpression ::= Expression 'as' Type

AssignmentExpression ::= Expression '=' Expression

GroupedExpression ::= '(' Expression ')'

ArrayExpression ::= '[' ArrayElements? ']'

ArrayElements ::= Expression (',' Expression)* ','?
               | Expression ';' Expression

IndexExpression ::= Expression '[' Expression ']'

CallExpression ::= read '(' CallParams? ')'
                | write '(' CallParams? ')'
                | Expression '(' CallParams? ')'

CallParams ::= Expression (',' Expression)* ','?

ContinueExpression ::= 'continue'

BreakExpression ::= 'break'

ReturnExpression ::= 'return' Expression?

SpecialFunctionExpression ::= IoExpression
                           | StatisticExpression

IoExpression ::= ReadExpression
              | WriteExpression

ReadExpression ::= 'read' '(' Expression  ')'

WriteExpression ::= 'write' '(' Expression  ')'

StatisticExpression ::= PlotExpression
                     | ScatterExpression
                     | HistogramExpression
                     | MeanExpression
                     | MedianExpression

PlotExpression ::= PlotI32Expresion
                | PlotF64Expression

PlotI32Expression ::= 'plot_i32' '(' Expression ',' Expression ')'

PlotF64Expression ::= 'plot_f64' '(' Expression ',' Expression ')'

ScatterExpression ::= ScatterI32Expresion
                | ScatterF64Expression

ScatterI32Expression ::= 'scatter_i32' '(' Expression ',' Expression ')'

ScatterF64Expression ::= 'scatter_f64' '(' Expression ',' Expression ')'

HistogramExpression ::= HistogramI32Expresion
                | HistogramF64Expression

HistogramI32Expression ::= 'histogram_i32' '(' Expression ')'

HistogramF64Expression ::= 'histogram_f64' '(' Expression ')'

MeanExpression ::= MeanI32Expresion
                | MeanF64Expression

MeanI32Expression ::= 'mean_i32' '(' Expression ')'

MeanF64Expression ::= 'mean_f64' '(' Expression ')'

MedianExpression ::= MedianI32Expresion
                | MedianF64Expression

MedianI32Expression ::= 'median_i32' '(' Expression ')'

MedianF64Expression ::= 'median_f64' '(' Expression ')'

ExpressionWithBlock ::= LoopExpression
                     | IfExpression

LoopExpression ::= InfiniteLoopExpression
                | PredicateLoopExpression

InfiniteLoopExpression ::= 'loop' BlockExpression

PredicateLoopExpression ::= 'while' Expression BlockExpression

IfExpression ::= 'if' Expression BlockExpression ( 'else' ( BlockExpression | IfExpression ) )?

StaticItem ::= 'static' 'IDENTIFIER' ':' Type ('=' Expression)? ';'

Expression ::= ExpressionWithoutBlock
            | ExpressionWithBlock
