Crate ::= Item*

Item ::= Function
      |  StaticItem

StaticItem ::= 'static' 'IDENTIFIER' ':' Type ';'

Function ::= 'fn' IDENTIFIER '(' FunctionParameters? ')' FunctionReturnType? LetStatement* BlockExpression

FunctionParameters ::= FunctionParam (',' FunctionParam)* ','?

FunctionParam ::= IDENTIFIER ':' Type

Type ::= PrimitiveType
      | ArrayType

PrimitiveType ::= 'bool'
               | 'i32'
               | 'f64'
               | 'char'

ArrayType ::= '[' ( PrimitiveType | '[' PrimitiveType ';' INTEGER_LITERAL ']' ) ';' INTEGER_LITERAL ']'

FunctionReturnType ::= '->' Type

BlockExpression ::= '{' Statement* '}'

Statement ::= Expression ';'

LetStatement ::= 'let' IDENTIFIER ':' Type ';'

Expression ::= ExpressionWithoutBlock
            | ExpressionWithBlock

ExpressionWithoutBlock ::= LiteralExpression
                        | IDENTIFIER
                        | OperatorExpression
                        | GroupedExpression
                        | ArrayExpression
                        | IndexExpression
                        | CallExpression
                        | ContinueExpression
                        | BreakExpression
                        | ReturnExpression
                        | SpecialFunctionExpression

LiteralExpression ::= CHAR_LITERAL
                   | INTEGER_LITERAL
                   | FLOAT_LITERAL
                   | BOOL_LITERAL

OperatorExpression ::= NegationExpression
                    | ArithmeticExpression
                    | ComparisonExpression
                    | BooleanExpression
                    | TypeCastExpression
                    | AssignmentExpression

NegationExpression ::= '-' Expression
                    | '!' Expression

ArithmeticExpression ::= Expression '+' Expression
                       | Expression '-' Expression
                       | Expression '*' Expression
                       | Expression '/' Expression
                       | Expression '%' Expression

ComparisonExpression ::= Expression '==' Expression
                      | Expression '!=' Expression
                      | Expression '>' Expression
                      | Expression '<' Expression
                      | Expression '>=' Expression
                      | Expression '<=' Expression

BooleanExpression ::= Expression '||' Expression
                   | Expression '&&' Expression

TypeCastExpression ::= Expression 'as' Type

AssignmentExpression ::= Expression '=' Expression

GroupedExpression ::= '(' Expression ')'

ArrayExpression ::= '[' ArrayElements? ']'

ArrayElements ::= Expression (',' Expression)* ','?
               | Expression ';' INTEGER_LITERAL

IndexExpression ::= Expression '[' INTEGER_LITERAL ']'

CallExpression ::= IDENTIFIER '(' CallParams? ')'

CallParams ::= Expression (',' Expression)* ','?

ContinueExpression ::= 'continue'

BreakExpression ::= 'break'

ReturnExpression ::= 'return' Expression?

SpecialFunctionExpression ::= IoExpression
                           | StatisticExpression

IoExpression ::= ReadExpression
              | WriteExpression

ReadExpression ::= 'read' '(' ( IDENTIFIER | IndexExpression )  ')'

WriteExpression ::= 'write' '(' Expression  ')'

StatisticExpression ::= PlotExpression
                     | ScatterExpression
                     | HistogramExpression
                     | MeanExpression
                     | MedianExpression
                     | MeanSquareErrorExpression
                     | MinExpression
                     | MaxExpression
                     | StandardDeviationExpression
                     | VarianceExpression
                     | SkewnessExpression
                     | KurtosisExpression
                     | RSquaredExpression
                     | SumExpression

PlotExpression ::= 'plot' '(' Expression ',' Expression ')'

ScatterExpression ::= 'scatter' '(' Expression ',' Expression ')'

HistogramExpression ::= 'histogram' '(' Expression ')'

MeanExpression ::= 'mean' '(' Expression ')'

MedianExpression ::= 'median' '(' Expression ')'

MeanSquareErrorExpression ::= 'mean_square_error' '(' Expression ',' Expression ')'

MinExpression ::= 'min' '(' Expression ')'

MaxExpression ::= 'max' '(' Expression ')'

StandardDeviationExpression ::= 'standard_deviation' '(' Expression ')'

VarianceExpression ::= 'variance' '(' Expression ')'

SkewnessExpression ::= 'skewness' '(' Expression ')'

KurtosisExpression ::= 'kurtosis' '(' Expression ')'

RSquaredExpression ::= 'r_squared' '(' Expression ',' Expression ')'

SumExpression ::= 'sum' '(' Expression ')'

ExpressionWithBlock ::= LoopExpression
                     | IfExpression

LoopExpression ::= InfiniteLoopExpression
                | PredicateLoopExpression

InfiniteLoopExpression ::= 'loop' BlockExpression

PredicateLoopExpression ::= 'while' Expression BlockExpression

IfExpression ::= 'if' Expression BlockExpression ( 'else' BlockExpression )?
